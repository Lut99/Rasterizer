%{

#include <cstdint>
#include <cstddef>
#include <string>

#include "tools/Array.hpp"
#include "rendering/auxillary/Vertex.hpp"
#include "rendering/auxillary/Index.hpp"

/* Declare the line and column numbers */
static size_t line = 1;
static size_t col = 1;

/* Declare the output arrays. */
extern Tools::Array<Rasterizer::Rendering::Vertex> new_obj_vertices;
extern Tools::Array<Rasterizer::Rendering::index_t> new_obj_indices;

/* Set the type of the parser. */
#define YYSTYPE void*

%}

start = "hellothere"     { printf("General Kenobi! You are a bold one!"); }
      | < . >            { printf("%c", yytext[0]); }

vertex = VERTEX x:COORD y:COORD z:COORD               { $$ = (void*) new Rasterizer::Rendering::Vertex({ x, y, z }, { 1.0f, 0.0f, 0.0f }); }
       | VERTEX x:COORD y:COORD z:COORD COORD         { $$ = (void*) new Rasterizer::Rendering::Vertex({ x, y, z }, { 1.0f, 0.0f, 0.0f }); }
      


VERTEX = "v" WHITESPACE
FACE = "f" WHITESPACE

COORD = [0-9]*\.[0-9]+(E[0-9]+)?    { $$ = (void*) new float(stof(yytext)); }
INDEX = [0-9]+                      { $$ = (void*) new uint32_t(stoul(yytext)); }

WHITESPACE = [ \t]*                 { col += yylen; }
NEWLINE = \n                        { ++line; col = 1; }
